{
  "hash": "43146029e6225730336c8d0838f3fe5b",
  "result": {
    "markdown": "---\ntitle: \"Forecasting Conventional Hydroelectric Power Generation in the US\"\nexecute: \n    freeze: auto\nformat: \n  html: \n    code-fold: show\n    code-tools: true\n---\n\n\n\n\n## Abstract\n\nIn the efforts of reaching net zero emissions, renewable energy sources get more and more important. One of the cheapest and most sustainable sources of electricity is conventional hydroelectric power generation.\n\nEven though, the US has been using conventional hydropower since 1950s, the industry is far from reaching its full potential. With thousands of yet to be used dams and an increasing pressure to switch to the renewable energy, the demand and investments are going to rise significantly. Meanwhile, high seasonality and annual variation of the hydropower output can produce more accurate forecasting models. Here Seasonal Naïve, Regression, ETS, ARIMA, and ARIMA with external regressors are tested using RMSE and MPE to see which model better predicts unseen data. Using the net monthly conventional hydropower generation dataset, I identified ARIMA as the best one for the role.\n\n**Technical Note**:\nA megawatt is a unit for measuring instantaneous power equivalent to one million watts or thousand kilowatts. A megawatt hour (MWh) is equal to 1,000 kilowatt hours (kWh).  It is equal to 1,000 kilowatts of energy consumed or produced in one hour.  It is a bit more than the amount of electricity used by an average US residential utility customer in one month (886 kWh), according to the EIA.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fpp3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────────────── fpp3 0.5 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ tibble      3.1.8     ✔ tsibble     1.1.3\n✔ dplyr       1.1.0     ✔ tsibbledata 0.4.1\n✔ tidyr       1.2.0     ✔ feasts      0.3.1\n✔ lubridate   1.8.0     ✔ fable       0.3.3\n✔ ggplot2     3.3.5     ✔ fabletools  0.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────────────── fpp3_conflicts ──\n✖ lubridate::date()    masks base::date()\n✖ dplyr::filter()      masks stats::filter()\n✖ tsibble::intersect() masks base::intersect()\n✖ tsibble::interval()  masks lubridate::interval()\n✖ dplyr::lag()         masks stats::lag()\n✖ tsibble::setdiff()   masks base::setdiff()\n✖ tsibble::union()     masks base::union()\n```\n:::\n:::\n\n\n## Data Preparation and Analysis\n\nI import the data on net energy generation of electricity from the conventional hydroelectric sources from the [EIA website](https://www.eia.gov/electricity/data/browser/#/topic/0?agg=2,0,1&fuel=05&geo=vvvvvvvvvvvvo&sec=g&linechart=elec.gen.hyc-us-99.m&columnchart=elec.gen.hyc-us-99.m&map=elec.gen.hyc-us-99.m&freq=m&ctype=linechart&ltype=pin&rtype=s&maptype=0&rse=0&pin=). The units are measured in thousand megawatt hours. The timeframe is from January 2001 through April 2023.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nnet_gen <- read_csv(\"Net_generation_United_States_all_sectors_monthly.csv\", \n    skip = 4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 268 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Month\ndbl (1): conventional hydroelectric thousand megawatthours\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nHere is a preview of the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(net_gen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  Month    `conventional hydroelectric thousand megawatthours`\n  <chr>                                                  <dbl>\n1 Apr 2023                                              17917.\n2 Mar 2023                                              20630.\n3 Feb 2023                                              19338.\n4 Jan 2023                                              22954.\n5 Dec 2022                                              21870.\n6 Nov 2022                                              18764.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(summarytools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'summarytools'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tibble':\n\n    view\n```\n:::\n:::\n\n\nI am changing the name of the variable to MWH for brevity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rename the variable to MWH\nnet_gen = net_gen %>% \n  rename(MWH = \"conventional hydroelectric thousand megawatthours\")\n```\n:::\n\n\nHere is a table of some descriptive statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndescr(net_gen,\n      stats = c(\"mean\", \"sd\",\"med\", \"min\", \"max\"), \n      transpose = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNon-numerical variable(s) ignored: Month\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nDescriptive Statistics  \nnet_gen$MWH  \nN: 268  \n\n                Mean   Std.Dev     Median        Min        Max\n--------- ---------- --------- ---------- ---------- ----------\n      MWH   22469.85   3972.41   22187.54   14638.18   32607.12\n```\n:::\n:::\n\n\nI reorder the rows, so that the last observation (earliest date) is now the first one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen=net_gen[order(nrow(net_gen):1),]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#changing to yearmonth format, naming Date, and indexing\nnet_gen = net_gen %>% \n  mutate(Date = yearmonth(Month)) |>\n  as_tsibble(index = Date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen %>% \n  autoplot(MWH) +\n  labs(title = \"Net Conventional Hydroelectric Power Generation\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/plotting net_gen-1.png){width=672}\n:::\n:::\n\n\nHere we can observe a general plot of the Hydropower time series. There seems to be no significant trend and high seasonality.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |>\n  gg_season(MWH, labels = \"both\")\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/seasonal plot-1.png){width=672}\n:::\n:::\n\n\nAs we can see here, there are spikes in the same months across all years, indicating high seasonality.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |>\n  gg_subseries(MWH)\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThis plot, where the blue line is the average across the same months, shows that on average there is a spike in the late spring to early summer. The trough is in fall.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |>\n  model(stl = STL(MWH)) |>\n  components() |> \n  gg_subseries(season_year) +\n  theme(axis.text.x = element_text(size = 5))\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nIn this plot we can see the average and the trend by month across different years. This plot shows the same spikes and troughs, but we can also observe that the months with the highest values have a downward trend. This means that even though the energy output in those months is still the highest, it diminishes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |>\n  model(stl = STL(MWH)) |>\n  components() |>\n  autoplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Ignoring unknown parameters: linewidth\n```\n:::\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nHere we see the STL decomposition components: trend, seasonality, and the remainder. There is high seasonality and some downward trend at the end of the series. The gray bars on the left show us that seasonality is very significant, whereas the general trend is less so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |>\n  ACF(MWH) |>\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe plot of Autocorrelation Figure also indicates high seasonality, since the the values 12 months apart have the highest correlation.\n\nI estimate Naive, Seasonal Naive, Drift, and two ETS models. There are two ETS models because the optimal ETS() (the default one) seems to be underperforming, since it chooses no trend. I add ETS(A,Ad,M) since it seems to increase forecast accuracy. \n\nA mable: 1 x 5\n    Naive Season_Naive         Drift       ETSopt           ETS\n  <model>      <model>       <model>      <model>       <model>\n1 <NAIVE>     <SNAIVE> <RW w/ drift> <ETS(M,N,A)> <ETS(A,Ad,M)>\n\n## Creating Training and Testing sets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#creating the var with the number of ~80% and ~20% of the observations and then splitting them accordingly.\nround(268*0.8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 214\n```\n:::\n\n```{.r .cell-code}\ntotal_obs.net_gen = dim(net_gen)[1] #puts n of obs into total_obs\ntrain_obs = total_obs.net_gen * 0.8\ntest_obs = total_obs.net_gen - train_obs\nnet_gen.train2 = head(net_gen, train_obs)\nnet_gen.test2 = tail(net_gen, test_obs)\n```\n:::\n\n\n## ARIMA Estimation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |> gg_tsdisplay(MWH,\n                     plot_type='partial', lag_max = 24)\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |> gg_tsdisplay(difference(MWH, 12),\n                     plot_type='partial', lag_max = 24)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 12 row(s) containing missing values (geom_path).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 12 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |> gg_tsdisplay(difference(MWH, 12) |> difference(),\n                     plot_type='partial', lag_max = 24)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 13 row(s) containing missing values (geom_path).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 13 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#initial ARIMA estimation\nnet_gen.train2 |>\n  model(auto = ARIMA(MWH,\n                     stepwise = FALSE, #gives ARIMA more time to calculate\n                     approx = FALSE)) -> arima.fit\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in sqrt(diag(best$var.coef)): NaNs produced\n```\n:::\n:::\n\n\nWhen estimating ARIMA models, it is important to check if the residuals look like white noise and have no patterns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narima.fit |>\n  gg_tsresiduals(lag_max=36)\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/ARIMA residuals-1.png){width=672}\n:::\n:::\n\n\nThe graphic of the residuals shows that residuals look pretty random, but there is a spike in acf that is statistically significant (crossed the blue line). I have to perform Ljung-Box test.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narima.fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A mable: 1 x 1\n                       auto\n                    <model>\n1 <ARIMA(2,0,0)(2,1,1)[12]>\n```\n:::\n:::\n\n\nA mable: 1 x 1\n                       auto\n                    <model>\n1 <ARIMA(2,0,0)(2,1,1)[12]>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Ljung-Box test\naugment(arima.fit) |>\n  features(.innov, ljung_box, lag = 36, dof = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .model lb_stat lb_pvalue\n  <chr>    <dbl>     <dbl>\n1 auto      28.9     0.575\n```\n:::\n\n```{.r .cell-code}\n#dof=p+q+P+Q from ARIMA(p,d,q)(P,D,Q)\n```\n:::\n\n\nThe p-value is very large, which is exactly what we need to proceed and not care about autocorrelation in the residuals.\n\n## Seasonal Naive, TS Regression, and ETS\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fit2 = net_gen.train2 |>\n  model(\n        Season_Naive = SNAIVE(MWH),\n        Regression = TSLM(MWH ~ trend() + season()),\n        ETSopt = ETS(MWH), #automatic\n        ETS = ETS(MWH ~ error(\"A\")\n                      + trend(\"Ad\")\n                      + season(\"M\"))  #industry standard\n        )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fit2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A mable: 1 x 4\n  Season_Naive Regression        ETSopt           ETS\n       <model>    <model>       <model>       <model>\n1     <SNAIVE>     <TSLM> <ETS(M,Ad,M)> <ETS(A,Ad,M)>\n```\n:::\n:::\n\n\nA mable: 1 x 4\n  Season_Naive Regression        ETSopt           ETS\n       <model>    <model>       <model>       <model>\n1     <SNAIVE>     <TSLM> <ETS(M,Ad,M)> <ETS(A,Ad,M)>\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy(net_gen.fit2) |>\n  select(.model, RMSE, MAE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  .model        RMSE   MAE\n  <chr>        <dbl> <dbl>\n1 Season_Naive 3201. 2437.\n2 Regression   2421. 1856.\n3 ETSopt       1687. 1296.\n4 ETS          1685. 1290.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy(arima.fit) |>\n  select(.model, RMSE, MAE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .model  RMSE   MAE\n  <chr>  <dbl> <dbl>\n1 auto   1698. 1243.\n```\n:::\n:::\n\n\nWe can see how closely the corresponding models predict the data within the Training set.\n\nNow using these models I predict the next 54 months and compare the predictions to the withheld observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#generating forecast\nnet_gen.fc2 = net_gen.fit2 |>\n  forecast(h = 54)\nnet_gen.fc2.arima = arima.fit |>\n  forecast(h = 54)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc2 |>\n  autoplot(net_gen.train2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal() +\n  theme(plot.caption = element_text(hjust = 6.5))\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc2 |>\n  #filter(.model = \"\") |>\n  autoplot(net_gen.test2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  #theme(plot.caption = element_text(hjust = 5))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc2.arima |>\n  autoplot(net_gen.train2) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc2.arima |>\n  #filter(.model = \"\") |>\n  autoplot(net_gen.test2) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  #theme(plot.caption = element_text(hjust = 5))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc2.arima |>\n  autoplot(net_gen.test2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA Forecast\",\n       subtitle = \"Nov 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nIn these plots we can closely observe the ARIMA forecast is quite close, and even though some predicted observations are off, almost all actual values are within the 95% prediction interval.\n\n## ARIMA with external Regressors\n\nI import the meteorological data on droughts in the US. I used the [Monthly Historical Drought Data](https://www.drought.gov/data-maps-tools/historical-drought-data-conditions-tool), because I assume that the general amount of water affects the aggregate power generated in that month. According to the [National Integrated Drought Information System](https://www.drought.gov/historical-information?dataset=1&selectedDateUSDM=20101221&selectedDateSpi=19580601), \"SPI captures how observed precipitation (rain, hail, snow) deviates from the climatological average over a given time period—in this case, over the 9 months leading up to the selected date.\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSPI <- read_csv(\"SPI.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1542 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): DATE\ndbl (12): 0, D0, D1, D2, D3, D4, -9, W0, W1, W2, W3, W4\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nI prepare the meteorological dataset and combine it with the Hydropower one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#finding the start date\nwhich(SPI$DATE==\"d_20010101\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1273\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#matching the timeframe with that of Hydropower dataset\nspi = SPI[1273:nrow(SPI), c(-1)]\nspi = spi[1:268,]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen = net_gen %>% \n  bind_cols(spi)\n```\n:::\n\n\nHere is a preview of the resulting data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(net_gen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 6 x 15 [1M]\n  Month       MWH     Date DATE     D0    D1    D2    D3    D4  `-9`    W0    W1\n  <chr>     <dbl>    <mth> <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Jan 2001 18852. 2001 Jan d_20…  40.8  28.2  12.7   7.3   2.8     0  18.4  11.3\n2 Feb 2001 17473. 2001 Feb d_20…  37.3  27.1  13.9   8.5   4.5     0  23.9  14.5\n3 Mar 2001 20477. 2001 Mar d_20…  37.6  25.9  11.8   7     3.8     0  17.5   8.6\n4 Apr 2001 18013. 2001 Apr d_20…  37.5  26.8  13     7.3   3.1     0  22.8  13.6\n5 May 2001 19176. 2001 May d_20…  36.4  27.6  14.4   8.2   3.4     0  29.7  20.6\n6 Jun 2001 20728. 2001 Jun d_20…  36.8  29.5  16.4   9.3   3.3     0  36.2  25.1\n# … with 3 more variables: W2 <dbl>, W3 <dbl>, W4 <dbl>\n```\n:::\n:::\n\n\nI again split my data in two parts: training and testing sets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Second Split of the data\ntotal_obs.net_gen = dim(net_gen)[1] #puts n of obs into total_obs\ntrain_obs = total_obs.net_gen * 0.8\ntest_obs = total_obs.net_gen - train_obs\nnet_gen.train2 = head(net_gen, train_obs)\nnet_gen.test2 = tail(net_gen, test_obs)\n```\n:::\n\n\nHere we can see the percentage of the US territory that had experienced exceptional drought (D4).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |> \n  autoplot(D4)\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nI combine this plot with the hydropower time series, to see if there is any visual relationship.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |>\n  pivot_longer(c(MWH, D4)) |>\n  ggplot(aes(x = Date, y = value)) +\n  geom_line() +\n  facet_grid(name ~ ., scales = \"free_y\") + ylab(\"\")\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nIt is hard to tell if there is any strong relationship between the two.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |>\n  pivot_longer(c(MWH, W4)) |>\n  ggplot(aes(x = Date, y = value)) +\n  geom_line() +\n  facet_grid(name ~ ., scales = \"free_y\") + ylab(\"\")\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nThe same lack of obvious relationship can be said about the exceptionally wet %.\n\nI look at the correlation between these variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(GGally)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen |>\n  GGally::ggpairs(columns = c(\"MWH\",\"D4\",\"W4\"))\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nAgain, no strong relationship, althought correlation with W4 is statistically significant.\n\nI include all the independent variables in the regression, as well as the seasonality variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fit3 = net_gen.train2 |>\n  model(ARIMA.reg = ARIMA(MWH ~ D0+D1+D2+D3+D4+W0+W1+W2+W3+W4+season()))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fit3 |> gg_tsresiduals()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nWe can clearly see here that the residuals look random, which is good.\n\nI then create the future observations for the independent meteorological observations, by averaging the past values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen_future <- new_data(net_gen.train2, 54) |>\n  mutate(D0 = mean(net_gen$D0),\n         D1 = mean(net_gen$D1),\n         D2 = mean(net_gen$D2),\n         D3 = mean(net_gen$D3),\n         D4 = mean(net_gen$D4),\n         W0 = mean(net_gen$W0),\n         W1 = mean(net_gen$W1),\n         W2 = mean(net_gen$W2),\n         W3 = mean(net_gen$W3),\n         W4 = mean(net_gen$W4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#forecasting using the newly created observations\nnet_gen.fc3 = net_gen.fit3 |>\n  forecast(new_data = net_gen_future)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc3 |>\n  autoplot(net_gen.train2) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\nARIMA with Regressors Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc3 |>\n  autoplot(net_gen.test2) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA with Regressors Forecast\",\n       subtitle = \"Nov 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n## Accuracy Evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc3 |>\n  accuracy(net_gen) |>\n  select(.model, RMSE, ME, MPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  .model     RMSE    ME   MPE\n  <chr>     <dbl> <dbl> <dbl>\n1 ARIMA.reg 2367. -112. -1.29\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc2 |>\n  accuracy(net_gen) |>\n  select(.model, RMSE, ME, MPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  .model        RMSE     ME    MPE\n  <chr>        <dbl>  <dbl>  <dbl>\n1 ETS          3824. -2821. -13.4 \n2 ETSopt       3863. -2877. -13.7 \n3 Regression   2928. -1518.  -7.79\n4 Season_Naive 3323. -1733.  -8.80\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc2.arima |>\n  accuracy(net_gen) |>\n  select(.model, RMSE, ME, MPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  .model  RMSE    ME   MPE\n  <chr>  <dbl> <dbl> <dbl>\n1 auto   2638. -567. -3.41\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnet_gen.fc2 |>\n  accuracy(net_gen) |>\n  select(.model, RMSE, ME, MPE) |>\n  as.data.frame() -> acc.metric\n\nnet_gen.fc2.arima |>\n  accuracy(net_gen) |>\n  select(.model, RMSE, ME, MPE) |>\n  as.data.frame() |>\n  bind_rows(acc.metric) -> acc.metric\n\nnet_gen.fc3 |>\n  accuracy(net_gen) |>\n  select(.model, RMSE, ME, MPE) |>\n  as.data.frame() |>\n  bind_rows(acc.metric) -> acc.metric\n\nacc.metric[2,1] = \"ARIMA\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc.metric %>% \n  group_by(.model, RMSE) %>% \n  ggplot(aes(x = RMSE, \n             xend = 2300, \n             y = reorder(.model, desc(RMSE)), \n             yend=.model,\n             label=round(RMSE, 0))) +\n  theme_minimal() +\n  geom_segment() +\n  geom_point() +\n  geom_text(nudge_x = -40, nudge_y = 0.2,\n            size = 3) +\n  theme(axis.ticks.y = element_blank(),\n        axis.text.y = element_blank()) +\n  labs(x = \"RMSE\", y = element_blank()) -> rmse.plot\nrmse.plot\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/RMSE plot-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc.metric %>% \n  group_by(.model, MPE) %>% \n  ggplot(aes(x = MPE, \n             xend = 0, \n             y = reorder(.model, desc(abs(MPE))), \n             yend=.model,\n             label=round(MPE, 2))) +\n  theme_minimal() +\n  geom_segment() +\n  geom_point() +\n  geom_text(nudge_x = 0.5, nudge_y = 0.2,\n            size = 3) +\n  labs(y = \"\", x = \"MPE\") -> mpe.plot\nmpe.plot\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/MPE plot-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpubr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggarrange(mpe.plot, rmse.plot,\n                    ncol = 2, nrow = 1) |>\n  annotate_figure(top = text_grob(\"Forecast Accuracy Metrics\"))\n```\n\n::: {.cell-output-display}\n![](ETS_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n## Conclusion\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc.metric |>\n  arrange(RMSE, MPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        .model     RMSE         ME        MPE\n1    ARIMA.reg 2366.673  -111.5811  -1.292216\n2        ARIMA 2638.318  -566.9333  -3.406917\n3   Regression 2927.642 -1517.8173  -7.792288\n4 Season_Naive 3322.937 -1733.2903  -8.803675\n5          ETS 3823.632 -2821.2435 -13.413444\n6       ETSopt 3863.003 -2876.8609 -13.679450\n```\n:::\n:::\n\n\nAs we can see from the evaluation metrics, the ARIMA with external regressors is the best performing model, in terms of both variance (RMSE) and bias (MPE).\n",
    "supporting": [
      "ETS_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}