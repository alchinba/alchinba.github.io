[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dinmukhamed (Dimash) Alchinbayev",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Dengue\nHydropower"
  },
  {
    "objectID": "projects.html#forecasting",
    "href": "projects.html#forecasting",
    "title": "Projects",
    "section": "",
    "text": "Dengue\nHydropower"
  },
  {
    "objectID": "projects.html#market-research",
    "href": "projects.html#market-research",
    "title": "Projects",
    "section": "Market Research",
    "text": "Market Research\n\nCluster Analysis"
  },
  {
    "objectID": "ETS.html",
    "href": "ETS.html",
    "title": "ETS",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nlibrary(fpp3)\n\n── Attaching packages ────────────────────────────────────────────── fpp3 0.5 ──\n\n\n✔ tibble      3.1.8     ✔ tsibble     1.1.3\n✔ dplyr       1.1.0     ✔ tsibbledata 0.4.1\n✔ tidyr       1.2.0     ✔ feasts      0.3.1\n✔ lubridate   1.8.0     ✔ fable       0.3.3\n✔ ggplot2     3.3.5     ✔ fabletools  0.3.3\n\n\n── Conflicts ───────────────────────────────────────────────── fpp3_conflicts ──\n✖ lubridate::date()    masks base::date()\n✖ dplyr::filter()      masks stats::filter()\n✖ tsibble::intersect() masks base::intersect()\n✖ tsibble::interval()  masks lubridate::interval()\n✖ dplyr::lag()         masks stats::lag()\n✖ tsibble::setdiff()   masks base::setdiff()\n✖ tsibble::union()     masks base::union()"
  },
  {
    "objectID": "ETS.html#r-markdown",
    "href": "ETS.html#r-markdown",
    "title": "ETS",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nlibrary(fpp3)\n\n── Attaching packages ────────────────────────────────────────────── fpp3 0.5 ──\n\n\n✔ tibble      3.1.8     ✔ tsibble     1.1.3\n✔ dplyr       1.1.0     ✔ tsibbledata 0.4.1\n✔ tidyr       1.2.0     ✔ feasts      0.3.1\n✔ lubridate   1.8.0     ✔ fable       0.3.3\n✔ ggplot2     3.3.5     ✔ fabletools  0.3.3\n\n\n── Conflicts ───────────────────────────────────────────────── fpp3_conflicts ──\n✖ lubridate::date()    masks base::date()\n✖ dplyr::filter()      masks stats::filter()\n✖ tsibble::intersect() masks base::intersect()\n✖ tsibble::interval()  masks lubridate::interval()\n✖ dplyr::lag()         masks stats::lag()\n✖ tsibble::setdiff()   masks base::setdiff()\n✖ tsibble::union()     masks base::union()"
  },
  {
    "objectID": "ETS.html#naive-snaive-drift-ets-for-net-energy-generation",
    "href": "ETS.html#naive-snaive-drift-ets-for-net-energy-generation",
    "title": "ETS",
    "section": "Naive, SNaive, Drift, ETS for net energy generation",
    "text": "Naive, SNaive, Drift, ETS for net energy generation\n\nlibrary(readr)\nnet_gen &lt;- read_csv(\"Net_generation_United_States_all_sectors_monthly.csv\", \n    skip = 4)\n\nRows: 268 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Month\ndbl (1): conventional hydroelectric thousand megawatthours\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nI import the data on net energy generation of electricity from the conventional hydroelectric sources.\n\nhead(net_gen)\n\n# A tibble: 6 × 2\n  Month    `conventional hydroelectric thousand megawatthours`\n  &lt;chr&gt;                                                  &lt;dbl&gt;\n1 Apr 2023                                              17917.\n2 Mar 2023                                              20630.\n3 Feb 2023                                              19338.\n4 Jan 2023                                              22954.\n5 Dec 2022                                              21870.\n6 Nov 2022                                              18764.\n\n\n\nnet_gen = net_gen %&gt;% \n  rename(MWH = \"conventional hydroelectric thousand megawatthours\")\n\n\nnet_gen=net_gen[order(nrow(net_gen):1),]\n\nI reorder the rows, so that the last observation (earliest date) is now the first one.\n\nnet_gen = net_gen %&gt;% \n  mutate(Date = yearmonth(Month)) |&gt;\n  as_tsibble(index = Date)\n\n\nwhich(net_gen$Month==\"Jan 2018\")\n\n[1] 205\n\nwhich(net_gen$Month==\"Jan 2022\")\n\n[1] 253\n\n\n\nnet_gen %&gt;% \n  autoplot(MWH) +\n  labs(title = \"Net Conventional Hydroelectric Power Generation\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n\n\nnet_gen |&gt;\n  gg_season(MWH, labels = \"right\")\n\n\n\n\n\nnet_gen |&gt;\n  gg_subseries(MWH)\n\n\n\n\n\nnet_gen |&gt;\n  model(stl = STL(MWH)) |&gt;\n  components() |&gt;\n  autoplot()\n\nWarning: Ignoring unknown parameters: linewidth\n\n\n\n\n\n\nnet_gen |&gt;\n  ACF(MWH) |&gt;\n  autoplot()\n\n\n\n\n\nnet_gen |&gt;\n  model(stl = STL(MWH)) |&gt;\n  components() |&gt; \n  gg_subseries(season_year) +\n  theme(axis.text.x = element_text(size = 5))\n\n\n\n\n\nnet_gen2 = net_gen[(205:268),]\n\nI take only last five years of the data.\n\nnet_gen2 %&gt;% \n  autoplot(MWH) +\n  labs(title = \"Net Conventional Hydroelectric Generation\",\n       subtitle = \"Jan 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n  #theme(title = element_text(size = 10))\n\n\nnet_gen2 |&gt;\n  model(stl = STL(MWH)) |&gt;\n  components() |&gt;\n  autoplot()\n\nWarning: Ignoring unknown parameters: linewidth\n\n\n\n\n\nI use STL model to decompose the time series. We can observe seasonality and a small negative trend.\n\nnet_gen.train = net_gen2[(1:48),]\nnet_gen.test = net_gen2[(49:64),]\n\nI split the last and the first four years into the testing and training sets respectively.\n\nnet_gen.fit = net_gen.train |&gt;\n  model(Naive = NAIVE(MWH),\n        Season_Naive = SNAIVE(MWH),\n        Drift = RW(MWH ~ drift()),\n        ETSopt = ETS(MWH),\n        ETS = ETS(MWH ~ error(\"A\")\n                      + trend(\"Ad\")\n                      + season(\"M\")))\n\nI estimate Naive, Seasonal Naive, Drift, and two ETS models. There are two ETS models because the optimal ETS() (the default one) seems to be underperforming, since it chooses no trend. I add ETS(A,Ad,M) since it seems to increase forecast accuracy.\nA mable: 1 x 5 Naive Season_Naive Drift ETSopt ETS      1    &lt;ETS(M,N,A)&gt; &lt;ETS(A,Ad,M)&gt;\n\naccuracy(net_gen.fit)\n\n# A tibble: 5 × 10\n  .model       .type           ME  RMSE   MAE    MPE  MAPE  MASE RMSSE    ACF1\n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Naive        Training -3.20e+ 1 2665. 2253. -0.784  9.70 1.25  1.08   0.147 \n2 Season_Naive Training -1.14e+ 3 2478. 1809. -5.51   8.19 1     1      0.523 \n3 Drift        Training -1.39e-12 2665. 2255. -0.643  9.71 1.25  1.08   0.147 \n4 ETSopt       Training  1.07e+ 1 1312.  943. -0.118  3.98 0.521 0.529 -0.0589\n5 ETS          Training  1.84e+ 0 1295. 1027. -0.143  4.34 0.568 0.522  0.131 \n\n\n\nnet_gen.fc = net_gen.fit |&gt;\n  forecast(h = \"16 months\")\n\n\nnet_gen.fc |&gt;\n  autoplot(net_gen.train, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\",\n       subtitle = \"Jan 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal() +\n  theme(plot.caption = element_text(hjust = 6.5))\n\n\n\n\nHere is the plot with the training data and the forecast of the unseen 16 months.\n\nnet_gen.fc |&gt;\n  autoplot(net_gen2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\",\n       subtitle = \"Jan 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal() +\n  theme(plot.caption = element_text(hjust = 6.5))\n\n\n\n\nHere is the plot of the forecast and the actual data.\n\nnet_gen.fc |&gt;\n  autoplot(net_gen.test, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\",\n       subtitle = \"Jan 2022 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal() +\n  theme(plot.caption = element_text(hjust = 6.5))\n\n\n\n\nHere is a closer look at the actual observations and the forecast. As we can see, visually, SNaive and ETS models fit better. I use accuracy() function to check which model fitted unseen data the best.\n\nnet_gen.fc %&gt;% \n  accuracy(net_gen2)\n\n# A tibble: 5 × 10\n  .model       .type     ME  RMSE   MAE     MPE  MAPE  MASE RMSSE  ACF1\n  &lt;chr&gt;        &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Drift        Test  -1863. 3756. 2981. -11.5   15.8  1.65  1.52  0.412\n2 ETS          Test  -2260. 3323. 2561. -11.9   13.1  1.42  1.34  0.198\n3 ETSopt       Test  -3538. 4312. 3600. -18.1   18.4  1.99  1.74  0.235\n4 Naive        Test  -2134. 3964. 3185. -12.9   16.9  1.76  1.60  0.427\n5 Season_Naive Test    372. 1952. 1585.   0.685  7.25 0.876 0.788 0.542\n\n\nUsing RMSE and MAE as metrics, we can observe that Seasonal Naive, surprisingly, has the best predictions, outperforming both ETS models. It is worth mentioning that the default ETS has the worst result.\nPerhaps, had I used the whole dataset, the ETS would have done a better job and see the negative trend, but given only five years, Seasonal Naive is the best choice."
  },
  {
    "objectID": "ETS.html#three-models-for-the-whole-ts-and-enslemble-model",
    "href": "ETS.html#three-models-for-the-whole-ts-and-enslemble-model",
    "title": "ETS",
    "section": "Three models for the whole ts and enslemble model",
    "text": "Three models for the whole ts and enslemble model\n\n#net_gen %&gt;% \n#  mutate(year = year(Date), #lubridate::year to exract year\n#         month = month(Date), #to extract month\n#         index = 1:nrow(net_gen)) -&gt; net_gen\n\n\n#net_gen$month = month.name[(net_gen$month)]\n#month.name[] is not a function\n\n\n#library(fastDummies)\n#net_gen |&gt; \n#  dummy_cols(select_columns = \"month\") -&gt; net_gen\n\n\nround(268*0.8)\n\n[1] 214\n\ntotal_obs.net_gen = dim(net_gen)[1] #puts n of obs into total_obs\ntrain_obs = total_obs.net_gen * 0.8\ntest_obs = total_obs.net_gen - train_obs\nnet_gen.train2 = head(net_gen, train_obs)\nnet_gen.test2 = tail(net_gen, test_obs)"
  },
  {
    "objectID": "ETS.html#testing-regression",
    "href": "ETS.html#testing-regression",
    "title": "ETS",
    "section": "Testing Regression",
    "text": "Testing Regression\n\nnet_gen.train2 |&gt;\n  model(TSLM(MWH ~ trend() + season())) |&gt;\n  forecast() |&gt;\n  autoplot(net_gen.train2)"
  },
  {
    "objectID": "ETS.html#arima-and-other-models",
    "href": "ETS.html#arima-and-other-models",
    "title": "ETS",
    "section": "ARIMA and other models",
    "text": "ARIMA and other models\n\nnet_gen |&gt; gg_tsdisplay(MWH,\n                     plot_type='partial', lag_max = 24)\n\n\n\n\n\nnet_gen.train2 %&gt;% \n  autoplot(log(MWH))\n\n\n\n\n\nlambda &lt;- net_gen.train2 |&gt;\n  features(MWH, features = guerrero) |&gt;\n  pull(lambda_guerrero)\nnet_gen.train2 |&gt;\n  autoplot(box_cox(MWH, lambda)) +\n  labs(y = \"\",\n       title = \"Transformed gas production with $\\\\lambda$ = \",\n         round(lambda,2))\n\n\n\nnet_gen.train2 |&gt;\n  autoplot()\n\nPlot variable not specified, automatically selected `.vars = MWH`\n\n\n\n\n\n\nnet_gen.train.arima = net_gen.train2 %&gt;% \n  mutate(bcMWH = box_cox(MWH, lambda))\n\n\nnet_gen |&gt; gg_tsdisplay(difference(MWH, 12),\n                     plot_type='partial', lag_max = 24)\n\nWarning: Removed 12 row(s) containing missing values (geom_path).\n\n\nWarning: Removed 12 rows containing missing values (geom_point).\n\n\n\n\n\n\nnet_gen |&gt; gg_tsdisplay(difference(MWH, 12) |&gt; difference(),\n                     plot_type='partial', lag_max = 24)\n\nWarning: Removed 13 row(s) containing missing values (geom_path).\n\n\nWarning: Removed 13 rows containing missing values (geom_point).\n\n\n\n\n\n\nnet_gen.train2 |&gt;\n  model(auto = ARIMA(MWH,\n                     stepwise = FALSE,\n                     approx = FALSE)) -&gt; arima.fit\n\nWarning in sqrt(diag(best$var.coef)): NaNs produced\n\n\n\narima.fit |&gt;\n  gg_tsresiduals(lag_max=36)\n\n\n\n\n\narima.fit\n\n# A mable: 1 x 1\n                       auto\n                    &lt;model&gt;\n1 &lt;ARIMA(2,0,0)(2,1,1)[12]&gt;\n\n\nA mable: 1 x 1 auto  1 &lt;ARIMA(2,0,0)(2,1,1)[12]&gt;\n\naugment(arima.fit) |&gt;\n  features(.innov, ljung_box, lag = 36, dof = 5)\n\n# A tibble: 1 × 3\n  .model lb_stat lb_pvalue\n  &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 auto      28.9     0.575\n\n\n\nnet_gen.train.arima |&gt;\n  model(auto = ARIMA(bcMWH,\n                     stepwise = FALSE,\n                     approx = FALSE)) -&gt; arima.fit2\n\n\narima.fit2 |&gt;\n  gg_tsresiduals(lag_max=36)\n\n\n\n\n\narima.fit2\n\n# A mable: 1 x 1\n                       auto\n                    &lt;model&gt;\n1 &lt;ARIMA(1,0,0)(2,1,0)[12]&gt;\n\n\nA mable: 1 x 1 auto  1 &lt;ARIMA(1,0,0)(2,1,0)[12]&gt;\n\naugment(arima.fit) |&gt;\n  features(.innov, ljung_box, lag = 36, dof = 3)\n\n# A tibble: 1 × 3\n  .model lb_stat lb_pvalue\n  &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 auto      28.9     0.672\n\n\n\nnet_gen.fit2 = net_gen.train2 |&gt;\n  model(Season_Naive = SNAIVE(MWH),\n        Regression = TSLM(MWH ~ trend() + season()),\n        ETSopt = ETS(MWH),\n        ETS = ETS(MWH ~ error(\"A\")\n                      + trend(\"Ad\")\n                      + season(\"M\")))\n\n\nnet_gen.fit2\n\n# A mable: 1 x 4\n  Season_Naive Regression        ETSopt           ETS\n       &lt;model&gt;    &lt;model&gt;       &lt;model&gt;       &lt;model&gt;\n1     &lt;SNAIVE&gt;     &lt;TSLM&gt; &lt;ETS(M,Ad,M)&gt; &lt;ETS(A,Ad,M)&gt;\n\n\nA mable: 1 x 4 Season_Naive Regression ETSopt ETS     1   &lt;ETS(M,Ad,M)&gt; &lt;ETS(A,Ad,M)&gt;\n\naccuracy(net_gen.fit2) |&gt;\n  select(.model, RMSE, MAE)\n\n# A tibble: 4 × 3\n  .model        RMSE   MAE\n  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;\n1 Season_Naive 3201. 2437.\n2 Regression   2421. 1856.\n3 ETSopt       1687. 1296.\n4 ETS          1685. 1290.\n\n\n\naccuracy(arima.fit) |&gt;\n  select(.model, RMSE, MAE)\n\n# A tibble: 1 × 3\n  .model  RMSE   MAE\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 auto   1698. 1243.\n\n\n\naccuracy(arima.fit2) |&gt;\n  select(.model, RMSE, MAE)\n\n# A tibble: 1 × 3\n  .model    RMSE     MAE\n  &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 auto   0.00570 0.00448\n\n\n\nnet_gen.fc2 = net_gen.fit2 |&gt;\n  forecast(h = 54)\nnet_gen.fc2.arima = arima.fit |&gt;\n  forecast(h = 54)\nnet_gen.fc2.arima2 = arima.fit2 |&gt;\n  forecast(h = 54)\n\n\nnet_gen.fc2 |&gt;\n  autoplot(net_gen.train2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal() +\n  theme(plot.caption = element_text(hjust = 6.5))\n\n\n\n\n\nnet_gen.fc2 |&gt;\n  #filter(.model = \"\") |&gt;\n  autoplot(net_gen.test2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal() +\n  theme(plot.caption = element_text(hjust = 5))\n\n\n\n\n\nnet_gen.fc2.arima |&gt;\n  autoplot(net_gen.train2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n\n\nnet_gen.fc2.arima2 |&gt;\n  autoplot(net_gen.train.arima, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA2 Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n\n\nnet_gen.fc2 |&gt;\n  accuracy(net_gen) |&gt;\n  select(.model, RMSE, ME, MPE)\n\n# A tibble: 4 × 4\n  .model        RMSE     ME    MPE\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 ETS          3999. -2990. -14.2 \n2 ETSopt       3863. -2877. -13.7 \n3 Regression   2928. -1518.  -7.79\n4 Season_Naive 3323. -1733.  -8.80\n\n\n\nnet_gen.fc2.arima |&gt;\n  accuracy(net_gen) |&gt;\n  select(.model, RMSE, ME, MPE)\n\n# A tibble: 1 × 4\n  .model  RMSE    ME   MPE\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 auto   2638. -567. -3.41\n\n\n\nnet_gen.fc2 |&gt;\n  accuracy(net_gen) |&gt;\n  select(.model, RMSE, ME, MPE) |&gt;\n  as.data.frame() -&gt; acc.metric\n\nnet_gen.fc2.arima |&gt;\n  accuracy(net_gen) |&gt;\n  select(.model, RMSE, ME, MPE) |&gt;\n  as.data.frame() |&gt;\n  bind_rows(acc.metric) -&gt; acc.metric\n\nacc.metric[1,1] = \"ARIMA\"\n\n\nacc.metric %&gt;% \n  group_by(.model, RMSE) %&gt;% \n  ggplot(aes(x = RMSE, \n             xend = 2500, \n             y = reorder(.model, desc(RMSE)), \n             yend=.model,\n             label=round(RMSE, 0))) +\n  theme_minimal() +\n  geom_segment() +\n  geom_point() +\n  geom_text(nudge_x = -50, nudge_y = 0.2,\n            size = 3) +\n  theme(axis.ticks.y = element_blank(),\n        axis.text.y = element_blank()) +\n  labs(x = \"RMSE\", y = element_blank()) -&gt; rmse.plot\n\n\nacc.metric %&gt;% \n  group_by(.model, ME) %&gt;% \n  ggplot(aes(x = ME, \n             xend = 0, \n             y = reorder(.model, desc(abs(ME))), \n             yend=.model,\n             label=round(ME, 2))) +\n  theme_minimal() +\n  geom_segment() +\n  geom_point() +\n  geom_text(nudge_x = 0, nudge_y = 0.2) +\n  #theme(axis.text.y=element_text(margin=margin(r=0))) +\n  labs(title = \"Mean Error by Forecast Model\", x = \"ME\", y = \"Models\")\n\n\n\n\n\nacc.metric %&gt;% \n  group_by(.model, MPE) %&gt;% \n  ggplot(aes(x = MPE, \n             xend = 0, \n             y = reorder(.model, desc(abs(MPE))), \n             yend=.model,\n             label=round(MPE, 2))) +\n  theme_minimal() +\n  geom_segment() +\n  geom_point() +\n  geom_text(nudge_x = 2, nudge_y = 0.2,\n            size = 3) +\n  labs(y = \"\", x = \"MPE\") -&gt; mpe.plot\n\n\nlibrary(ggpubr)\n\n\nggarrange(mpe.plot, rmse.plot,\n                    ncol = 2, nrow = 1) |&gt;\n  annotate_figure(top = text_grob(\"Forecast Accuracy Metrics\"))\n\n\n\n\n\n#net_gen.test2\n#net_gen.fc2.arima2 |&gt;\n#  accuracy()\n\n\nnet_gen.fc2.arima |&gt;\n  autoplot(net_gen.test2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA Forecast\",\n       subtitle = \"Nov 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n\n\nnet_gen.fc2.arima |&gt;\n  autoplot(net_gen.test2) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA Forecast\",\n       subtitle = \"Nov 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n\n\nnet_gen.fc2 |&gt;\n  filter(.model == \"Regression\") |&gt;\n  autoplot(net_gen.test2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nRegression Forecast\",\n       subtitle = \"Nov 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()"
  },
  {
    "objectID": "ETS.html#arima-with-external-regressors",
    "href": "ETS.html#arima-with-external-regressors",
    "title": "ETS",
    "section": "ARIMA with external Regressors",
    "text": "ARIMA with external Regressors\n\nSPI &lt;- read_csv(\"SPI.csv\")\n\nRows: 1542 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): DATE\ndbl (12): 0, D0, D1, D2, D3, D4, -9, W0, W1, W2, W3, W4\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwhich(SPI$DATE==\"d_20010101\")\n\n[1] 1273\n\n\n\nspi = SPI[1273:nrow(SPI), c(-1)]\nspi = spi[1:268,]\n\n\nnet_gen = net_gen %&gt;% \n  bind_cols(spi)\n\n\nhead(net_gen)\n\n# A tsibble: 6 x 15 [1M]\n  Month       MWH     Date DATE     D0    D1    D2    D3    D4  `-9`    W0    W1\n  &lt;chr&gt;     &lt;dbl&gt;    &lt;mth&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Jan 2001 18852. 2001 Jan d_20…  40.8  28.2  12.7   7.3   2.8     0  18.4  11.3\n2 Feb 2001 17473. 2001 Feb d_20…  37.3  27.1  13.9   8.5   4.5     0  23.9  14.5\n3 Mar 2001 20477. 2001 Mar d_20…  37.6  25.9  11.8   7     3.8     0  17.5   8.6\n4 Apr 2001 18013. 2001 Apr d_20…  37.5  26.8  13     7.3   3.1     0  22.8  13.6\n5 May 2001 19176. 2001 May d_20…  36.4  27.6  14.4   8.2   3.4     0  29.7  20.6\n6 Jun 2001 20728. 2001 Jun d_20…  36.8  29.5  16.4   9.3   3.3     0  36.2  25.1\n# … with 3 more variables: W2 &lt;dbl&gt;, W3 &lt;dbl&gt;, W4 &lt;dbl&gt;\n\n\n\ntotal_obs.net_gen = dim(net_gen)[1] #puts n of obs into total_obs\ntrain_obs = total_obs.net_gen * 0.8\ntest_obs = total_obs.net_gen - train_obs\nnet_gen.train2 = head(net_gen, train_obs)\nnet_gen.test2 = tail(net_gen, test_obs)\n\n\nnet_gen |&gt; \n  autoplot(D0)\n\n\n\n\n\nnet_gen |&gt; \n  autoplot(D4)\n\n\n\nnet_gen |&gt;\n  autoplot(MWH)\n\n\n\n\n\nnet_gen |&gt;\n  pivot_longer(c(MWH, D4)) |&gt;\n  ggplot(aes(x = Date, y = value)) +\n  geom_line() +\n  facet_grid(name ~ ., scales = \"free_y\") + ylab(\"\")\n\n\n\n\n\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\nnet_gen |&gt;\n  GGally::ggpairs(columns = c(\"MWH\",\"W3\",\"W4\"))\n\n\n\n\n\nnet_gen.fit3 = net_gen.train2 |&gt;\n  model(ARIMA.reg = ARIMA(MWH ~ D0+D1+D2+D3+D4+W0+W1+W2+W3+W4+season()))\n\n\nnet_gen.fit3 |&gt; gg_tsresiduals()\n\n\n\n\n\nnet_gen_future &lt;- new_data(net_gen.train2, 54) |&gt;\n  mutate(D0 = mean(net_gen$D0),\n         D1 = mean(net_gen$D1),\n         D2 = mean(net_gen$D2),\n         D3 = mean(net_gen$D3),\n         D4 = mean(net_gen$D4),\n         W0 = mean(net_gen$W0),\n         W1 = mean(net_gen$W1),\n         W2 = mean(net_gen$W2),\n         W3 = mean(net_gen$W3),\n         W4 = mean(net_gen$W4))\n\n\nnet_gen.fc3 = net_gen.fit3 |&gt;\n  forecast(new_data = net_gen_future)\n\n\nnet_gen.fc3 |&gt;\n  autoplot(net_gen.train2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation Forecast\",\n       subtitle = \"Jan 2001 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n  #theme(plot.caption = element_text(hjust = 6.5))\n\n\nnet_gen.fc3 |&gt;\n  autoplot(net_gen.test2, level = NULL) +\n  guides(colour = guide_legend(title = \"Forecast\")) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA with Regressors Forecast\",\n       subtitle = \"Nov 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n\n\nnet_gen.fc3 |&gt;\n  accuracy(net_gen) |&gt;\n  select(.model, RMSE, ME, MPE)\n\n# A tibble: 1 × 4\n  .model     RMSE    ME   MPE\n  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 ARIMA.reg 2367. -112. -1.29\n\n\n\nnet_gen.test2 |&gt;\n  autoplot(MWH) +\n  autolayer(net_gen.fc3, level = NULL) +\n  autolayer(net_gen.fc2.arima, level = NULL) +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA with Regressors Forecast\",\n       subtitle = \"Nov 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  theme_minimal()\n\n\n\n\n\n  ggplot() + \n  geom_line(data=net_gen.test2,\n            aes(x=Date, y=MWH),\n            color='black') +\n  geom_line(data=net_gen.fc3,\n            aes(x=Date, y=.mean, color = \"blue\"),\n            color='blue') + \n  geom_line(data=net_gen.fc2.arima,\n            aes(x=Date, y=.mean, color = \"red\"),\n            color='red') +\n  labs(title = \"Net Conventional Hydroelectric Generation\nARIMA with Regressors Forecast\",\n       subtitle = \"Nov 2018 - Apr 2023, Monthly\",\n       y = \"Thousand Megawatthours\",\n       x = \"Date\",\n       caption = \"Source: U.S. Energy Information Administration\") +\n  scale_color_manual(values = c(\"red\", \"blue\"), labels = c(\"Data Frame 1\", \"Data Frame 2\"))\n\nWarning: The output of `fortify(&lt;fable&gt;)` has changed to better suit usage with the ggdist package.\nIf you're using it to extract intervals, consider using `hilo()` to compute intervals, and `unpack_hilo()` to obtain values.\nThe output of `fortify(&lt;fable&gt;)` has changed to better suit usage with the ggdist package.\nIf you're using it to extract intervals, consider using `hilo()` to compute intervals, and `unpack_hilo()` to obtain values."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Dinmukhamed (Dimash) Alchinbayev",
    "section": "EDUCATION",
    "text": "EDUCATION\nBOSTON COLLEGE, Woods College of Advancing Studies | Boston, MA.\nM.S. Applied Economics; M.S. Applied Analytics | Jan. 2023 – May 2024\nSUFFOLK UNIVERSITY, College of Arts and Sciences | Boston, MA\nB.A. in Economics; B.A. in Politics, Philosophy, and Econ (Honors) | Sep.2018–May 2022\nGPA: 3.9"
  },
  {
    "objectID": "index.html#related-courses",
    "href": "index.html#related-courses",
    "title": "Dinmukhamed (Dimash) Alchinbayev",
    "section": "RELATED COURSES",
    "text": "RELATED COURSES\nMachine Learning Algorithms; Econometrics; Market Research and Data Analysis;\nStatistics and Probability; Linear Algebra; Multivariable Calculus;\nPublic Finance; Forecasting; Politics and Data Analysis; Managerial Economics"
  },
  {
    "objectID": "index.html#work-experience",
    "href": "index.html#work-experience",
    "title": "Dinmukhamed (Dimash) Alchinbayev",
    "section": "WORK EXPERIENCE",
    "text": "WORK EXPERIENCE\nAsian Development Bank | Remote | Sep. 2022–Jan. 2023\nResearch Assistant\n\nWorked with the team of economists to identify key hypotheses and metrics to identify the impact of digital finance on agricultural enterprises.\nComposed exhaustive reports on the latest academic and business progress in digitalization of agricultural finance and its effects.\nWorked with and cleaned the WDI and FINDEX survey datasets; visualized the statistics, using Stata and Excel.\nFound relevant data from the official and secondary sources, such as central banks and business reports; cleaned and transformed the data, using Stata, R, and Excel for easier use and analysis.\nDid OLS regression and statistical analyses on the individual characteristics associated with borrowing, among agricultural cultivators using Stata.\nDelivered outcomes within tight deadlines.\n\nBeacon Hill Institute | Boston, MA | Nov. 2021–Aug. 2022\nData Analyst and Research Assistant\n\nCollaborated with the team of researchers to identify the key metrics needed for the research of the effects of taxes on businesses and government spending in Massachusetts.\nComposed literature reviews on the effects of the earmarked tax revenue on the government spending.\nAnalyzed the flow of earmarked taxes revenue across different government agencies and funds.\nFound, cleaned, and organized data from the Federal and State sources, using R and Stata.\nDid regression analysis and visualized earmark tax revenue and relevant spending data using R and Stata.\nPresented the key findings to the Directors of the BHI and stakeholders.\n\nQazindustry, Center of Industry and Export | Astana, Kazakhstan | Jun. 2019–Aug. 2019\nInternational Experience and Export Analyst Intern\n\nTranslated technical information about government subsidies into non-technical presentations for the small and medium domestic exporters.\nConducted interviews with multiple business owners over phone and in person and advised them corresponding to their needs.\nHelped organizing the Conference for the largest non-oil exporters in Astana.\nFound and analyzed successful cases of the international analogs of the government support of the exporters. Communicated key findings of the analysis to the stakeholders.\nDesigned a blueprint of a virtual assistant program that improved clients’ interaction with the service."
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Dinmukhamed (Dimash) Alchinbayev",
    "section": "SKILLS",
    "text": "SKILLS\nSoftware: R, Stata, Excel, PowerPoint, SQL, Python, Tableau\nHard: Regression, Logit, Splines, KNN, SVM, Regression Trees, Tuning, Clustering, Conjoint\nSoft: Analytical Thinking, Communication, Teamwork, Report Writing, Presenting"
  },
  {
    "objectID": "index.html#independent-research",
    "href": "index.html#independent-research",
    "title": "Dinmukhamed (Dimash) Alchinbayev",
    "section": "INDEPENDENT RESEARCH",
    "text": "INDEPENDENT RESEARCH\nApplied Machine Learning Project\nTrained multiple ML models in R (Ridge Regression, Splines, KNN, Regression Trees, Trees Bagging, and Support Vector Machines) to predict the value of Procurement contracts based on their available descriptions and corruption indices. Result: KNN (categorical) and Bagged Tree (continuous) are the most optimal models to predict Procurement Contract values.\nEconomics Senior Thesis on Effectiveness of Economic Sanctions\nPerformed literature review; statistical data analysis; combined multiple databases (GSDB, World Bank, and Freedom House), and used a logistic regression model to find what factors lead to the increase in the probability of the success of sanctions. Result: Sanctions are more likely to succeed if they aim narrowly, ban trade completely, and are aimed towards politically non-free countries.\nSenior Thesis on Political Economy of Corruption in Russia and the Effects of Sanctions on it\nPerformed extensive literature review of Russian sources, data analysis, and application of existing philosophical paradigms to answer multidisciplinary question of the nature of corruption in Russia."
  }
]